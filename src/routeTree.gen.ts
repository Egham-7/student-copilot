/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotesImport } from './routes/_notes'
import { Route as IndexImport } from './routes/index'
import { Route as NotesNoteIdIndexImport } from './routes/notes/$noteId/index'

// Create/Update Routes

const NotesRoute = NotesImport.update({
  id: '/_notes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NotesNoteIdIndexRoute = NotesNoteIdIndexImport.update({
  id: '/notes/$noteId/',
  path: '/notes/$noteId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_notes': {
      id: '/_notes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NotesImport
      parentRoute: typeof rootRoute
    }
    '/notes/$noteId/': {
      id: '/notes/$noteId/'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof NotesRoute
  '/notes/$noteId': typeof NotesNoteIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof NotesRoute
  '/notes/$noteId': typeof NotesNoteIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_notes': typeof NotesRoute
  '/notes/$noteId/': typeof NotesNoteIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/notes/$noteId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/notes/$noteId'
  id: '__root__' | '/' | '/_notes' | '/notes/$noteId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotesRoute: typeof NotesRoute
  NotesNoteIdIndexRoute: typeof NotesNoteIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotesRoute: NotesRoute,
  NotesNoteIdIndexRoute: NotesNoteIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_notes",
        "/notes/$noteId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_notes": {
      "filePath": "_notes.tsx"
    },
    "/notes/$noteId/": {
      "filePath": "notes/$noteId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
